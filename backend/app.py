"""
Flask backend for Employee Onboarding Chatbot
Handles Azure OpenAI integration and function calling
"""

import os
import json
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import AzureOpenAI
from dotenv import load_dotenv

from mock_data import onboarding_faqs
from functions import FUNCTION_DEFINITIONS, execute_function

# Load environment variables
load_dotenv()

# Initialize Flask app
app = Flask(__name__)
CORS(app)  # Enable CORS for React frontend

# Initialize Azure OpenAI client
client = AzureOpenAI(
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
    api_key=os.getenv("AZURE_OPENAI_API_KEY"),
    api_version="2024-07-01-preview",  # Use fixed version for stability
)

DEPLOYMENT_NAME = os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME")


def create_system_prompt():
    """
    Create enhanced system prompt with few-shot examples and formatting guidelines
    """
    base_prompt = """B·∫°n l√† Tr·ª£ l√Ω Onboarding th√¥ng minh c·ªßa FPT Software. Nhi·ªám v·ª• c·ªßa b·∫°n l√† h·ªó tr·ª£ nh√¢n vi√™n m·ªõi trong qu√° tr√¨nh onboarding m·ªôt c√°ch ch·ªß ƒë·ªông v√† hi·ªáu qu·∫£.

## T√≠nh c√°ch
- Th√¢n thi·ªán, chuy√™n nghi·ªáp, nhi·ªát t√¨nh
- Ch·ªß ƒë·ªông h·ªó tr·ª£, kh√¥ng ch·ªâ ƒë·ª£i ƒë∆∞·ª£c h·ªèi
- Quan t√¢m ƒë·∫øn deadline v√† s·ª± ti·∫øn b·ªô c·ªßa nh√¢n vi√™n

## Quy t·∫Øc tr·∫£ l·ªùi

### 1. ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi
- S·ª≠ d·ª•ng Markdown ƒë·ªÉ ƒë·ªãnh d·∫°ng r√µ r√†ng
- Danh s√°ch nhi·ªám v·ª•: d√πng bullet points v·ªõi emoji (‚úÖ cho Done, ‚è≥ cho Pending)
- Th√¥ng tin li√™n l·∫°c: hi·ªÉn th·ªã Email, Phone, Teams link r√µ r√†ng
- Ng√†y th√°ng: format DD/MM/YYYY
- Priority: d√πng emoji (üî¥ High, üü° Medium, üü¢ Low)

### 2. S·ª≠ d·ª•ng Functions
- Khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ nhi·ªám v·ª• ‚Üí g·ªçi get_onboarding_tasks
- Khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ manager/buddy ‚Üí g·ªçi get_employee_info
- Khi ng∆∞·ªùi d√πng b√°o ho√†n th√†nh task ‚Üí g·ªçi update_task_status
- Khi ng∆∞·ªùi d√πng mu·ªën k·∫øt n·ªëi v·ªõi ai ƒë√≥ ‚Üí g·ªçi send_introduction_message

### 3. Ch√†o h·ªèi ch·ªß ƒë·ªông
- Lu√¥n g·ªçi t√™n nh√¢n vi√™n khi bi·∫øt th√¥ng tin
- Ki·ªÉm tra v√† nh·∫Øc v·ªÅ nhi·ªám v·ª• s·∫Øp ƒë·∫øn h·∫°n
- ƒê·ªÅ xu·∫•t h√†nh ƒë·ªông ti·∫øp theo

### 4. X·ª≠ l√Ω kh√¥ng bi·∫øt
- N·∫øu kh√¥ng r√µ ho·∫∑c kh√¥ng c√≥ th√¥ng tin ‚Üí ƒë·ª´ng b·ªãa ƒë·∫∑t
- ƒê·ªÅ xu·∫•t li√™n h·ªá v·ªõi HR ho·∫∑c IT Support
- Format: "Em ch∆∞a c√≥ th√¥ng tin v·ªÅ [ch·ªß ƒë·ªÅ]. Anh/ch·ªã c√≥ mu·ªën em k·∫øt n·ªëi anh/ch·ªã v·ªõi b·ªô ph·∫≠n [HR/IT] ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ kh√¥ng?"

## V√≠ d·ª• FAQ

"""
    
    # Add few-shot examples from FAQ
    for i, faq in enumerate(onboarding_faqs[:4], 1):
        base_prompt += f"**Q{i}:** {faq['q']}\n**A{i}:** {faq['a']}\n\n"
    
    base_prompt += """
## V√≠ d·ª• format ph·∫£n h·ªìi t·ªët

**Danh s√°ch nhi·ªám v·ª•:**
‚úÖ G·∫∑p m·∫∑t Buddy (Ho√†n th√†nh)
‚è≥ Ho√†n th√†nh kh√≥a h·ªçc Security (H·∫°n: 25/10) - üî¥ ∆Øu ti√™n cao
‚è≥ Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng dev (H·∫°n: 27/10) - üü° ∆Øu ti√™n trung b√¨nh

**Th√¥ng tin li√™n l·∫°c:**
üìß Email: cuong.tran@fsoft.com.vn
üìû Phone: +84 93 456 7890
üí¨ [Chat tr√™n Teams](https://teams.microsoft.com/l/chat/cuong.tran)

H√£y √°p d·ª•ng phong c√°ch tr√™n cho m·ªçi ph·∫£n h·ªìi.
"""
    
    return base_prompt


@app.route('/api/chat', methods=['POST'])
def chat():
    """
    Main chat endpoint
    Receives message history and returns assistant response
    """
    try:
        data = request.json
        messages = data.get('messages', [])
        
        if not messages:
            return jsonify({"error": "No messages provided"}), 400
        
        # Add system prompt if not present
        if not messages or messages[0].get("role") != "system":
            system_message = {
                "role": "system",
                "content": create_system_prompt()
            }
            messages.insert(0, system_message)
        
        # Call Azure OpenAI with function definitions
        response = client.chat.completions.create(
            model=DEPLOYMENT_NAME,
            messages=messages,
            functions=FUNCTION_DEFINITIONS,
            function_call="auto",
            temperature=0.7,
            max_tokens=800
        )
        
        response_message = response.choices[0].message
        
        # Check if LLM wants to call a function
        if response_message.function_call:
            function_name = response_message.function_call.name
            function_args = response_message.function_call.arguments
            
            # Execute the function
            function_result = execute_function(function_name, function_args)
            
            # Add assistant's function call to messages
            messages.append({
                "role": "assistant",
                "content": None,
                "function_call": {
                    "name": function_name,
                    "arguments": function_args
                }
            })
            
            # Add function result to messages
            messages.append({
                "role": "function",
                "name": function_name,
                "content": json.dumps(function_result, ensure_ascii=False)
            })
            
            # Call LLM again to generate natural language response
            second_response = client.chat.completions.create(
                model=DEPLOYMENT_NAME,
                messages=messages,
                temperature=0.7,
                max_tokens=800
            )
            
            final_message = second_response.choices[0].message
            
            return jsonify({
                "success": True,
                "messages": messages,
                "response": {
                    "role": "assistant",
                    "content": final_message.content
                }
            })
        
        # No function call - return direct response
        return jsonify({
            "success": True,
            "messages": messages,
            "response": {
                "role": "assistant",
                "content": response_message.content
            }
        })
        
    except Exception as e:
        print(f"Error in chat endpoint: {str(e)}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500


@app.route('/api/greeting', methods=['POST'])
def get_greeting():
    """
    Generate proactive greeting for a specific employee
    Checks for urgent tasks and creates personalized welcome message
    """
    try:
        data = request.json
        employee_id = data.get('employee_id', 'E123')  # Default to E123
        
        from functions import get_employee_info, check_urgent_tasks
        
        # Get employee info
        emp_result = get_employee_info(employee_id)
        if not emp_result.get("success"):
            return jsonify({
                "success": False,
                "error": "Employee not found"
            }), 404
        
        employee = emp_result["data"]
        name = employee["name"].split()[-1]  # Get first name
        
        # Check for urgent tasks
        urgent_result = check_urgent_tasks(employee_id)
        urgent_tasks = urgent_result.get("urgent_tasks", [])
        
        # Build greeting message
        greeting = f"üëã Ch√†o {name}! Em l√† Tr·ª£ l√Ω Onboarding c·ªßa FPT Software.\n\n"
        
        if urgent_tasks:
            if len(urgent_tasks) == 1:
                task = urgent_tasks[0]
                days_text = "h√¥m nay" if task["days_left"] == 0 else f"trong {task['days_left']} ng√†y t·ªõi"
                greeting += f"‚ö†Ô∏è Em th·∫•y c√≥ **{task['task']}** s·∫Øp ƒë·∫øn h·∫°n {days_text}. "
                greeting += "Anh nh·ªõ ho√†n th√†nh nh√©!\n\n"
            else:
                greeting += f"‚ö†Ô∏è Em th·∫•y anh c√≥ **{len(urgent_tasks)} nhi·ªám v·ª•** s·∫Øp ƒë·∫øn h·∫°n. "
                greeting += "Anh c√≥ mu·ªën xem chi ti·∫øt kh√¥ng?\n\n"
        
        greeting += "Em c√≥ th·ªÉ gi√∫p g√¨ cho anh h√¥m nay?"
        
        return jsonify({
            "success": True,
            "greeting": greeting,
            "employee": {
                "id": employee_id,
                "name": employee["name"]
            },
            "urgent_tasks_count": len(urgent_tasks)
        })
        
    except Exception as e:
        print(f"Error generating greeting: {str(e)}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500


@app.route('/api/health', methods=['GET'])
def health():
    """Health check endpoint"""
    return jsonify({
        "status": "healthy",
        "service": "Employee Onboarding Chatbot API"
    })


if __name__ == '__main__':
    # Check for required environment variables
    required_vars = [
        "AZURE_OPENAI_ENDPOINT",
        "AZURE_OPENAI_API_KEY",
        "AZURE_OPENAI_DEPLOYMENT_NAME"
    ]
    
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print("‚ö†Ô∏è  Warning: Missing environment variables:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\nPlease create a .env file based on .env.example")
    else:
        print("‚úÖ All environment variables loaded")
    
    print("\nüöÄ Starting Flask server on http://localhost:5000")
    app.run(debug=True, port=5000)
